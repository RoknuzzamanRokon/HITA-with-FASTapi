"""Add giver_email and receiver_email to PointTransaction

Revision ID: 2d09216bbe39
Revises: f7db75421f8f
Create Date: 2025-05-31 13:16:26.355682

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text
from sqlalchemy.engine import reflection

# revision identifiers, used by Alembic.
revision: str = '2d09216bbe39'
down_revision: Union[str, None] = 'f7db75421f8f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = reflection.Inspector.from_engine(conn)

    # --- demo_hotel: add timestamps if missing ---
    if not conn.execute(text("SHOW COLUMNS FROM demo_hotel LIKE 'created_at';")).fetchone():
        op.add_column('demo_hotel', sa.Column('created_at', sa.DateTime(), nullable=True))
    if not conn.execute(text("SHOW COLUMNS FROM demo_hotel LIKE 'updated_at';")).fetchone():
        op.add_column('demo_hotel', sa.Column('updated_at', sa.DateTime(), nullable=True))

    # --- Drop FK on provider_mappings if present ---
    existing_fks = {fk['name'] for fk in inspector.get_foreign_keys('provider_mappings')}
    if 'provider_mappings_ibfk_1' in existing_fks:
        op.drop_constraint('provider_mappings_ibfk_1', 'provider_mappings', type_='foreignkey')

    # --- hotels: drop the itt-ID index if present ---
    existing_hotels_idxs = {idx['name'] for idx in inspector.get_indexes('hotels')}
    if 'ix_hotels_ittid' in existing_hotels_idxs:
        op.drop_index('ix_hotels_ittid', table_name='hotels')

    # --- locations: add timestamps if missing ---
    if not conn.execute(text("SHOW COLUMNS FROM locations LIKE 'created_at';")).fetchone():
        op.add_column('locations', sa.Column('created_at', sa.DateTime(), nullable=True))
    if not conn.execute(text("SHOW COLUMNS FROM locations LIKE 'updated_at';")).fetchone():
        op.add_column('locations', sa.Column('updated_at', sa.DateTime(), nullable=True))

    # --- provider_mappings: drop its indexes if present ---
    existing_pm_idxs = {idx['name'] for idx in inspector.get_indexes('provider_mappings')}
    for idx_name in ('idx_ittid', 'idx_provider_id', 'idx_provider_name'):
        if idx_name in existing_pm_idxs:
            op.drop_index(idx_name, table_name='provider_mappings')

    # --- summary_status: drop total_rooms if present ---
    if conn.execute(text("SHOW COLUMNS FROM summary_status LIKE 'total_rooms';")).fetchone():
        op.drop_column('summary_status', 'total_rooms')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('summary_status', sa.Column('total_rooms', mysql.INTEGER(), autoincrement=False, nullable=False))
    op.create_index(op.f('idx_provider_name'), 'provider_mappings', ['provider_name'], unique=False)
    op.create_index(op.f('idx_provider_id'), 'provider_mappings', ['id'], unique=False)
    op.create_index(op.f('idx_ittid'), 'provider_mappings', ['ittid'], unique=False)
    op.drop_column('locations', 'updated_at')
    op.drop_column('locations', 'created_at')
    op.create_index(op.f('idx_hotel_ittid'), 'hotels', ['ittid'], unique=False)
    op.drop_column('demo_hotel', 'updated_at')
    op.drop_column('demo_hotel', 'created_at')
    # ### end Alembic commands ###
